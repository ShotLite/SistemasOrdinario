
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 09 18:48:41 CST 2020
//----------------------------------------------------

package jflexproy1;

import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Wed Dec 02 19:44:05 CST 2020
  */
public class Sintax
 extends java_cup.runtime.lr_parser
{
  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\003\011\000\002\003" +
    "\010\000\002\003\007\000\002\003\005\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\005\000\002\004\004\000\002\004" +
    "\003\000\002\005\005\000\002\005\007\000\002\005\007" +
    "\000\002\005\006\000\002\005\006\000\002\005\005\000" +
    "\002\005\007\000\002\005\007\000\002\005\006\000\002" +
    "\005\006\000\002\005\010\000\002\005\010\000\002\005" +
    "\011\000\002\005\011\000\002\005\006\000\002\005\010" +
    "\000\002\005\006\000\002\005\010\000\002\005\010\000" +
    "\002\005\012\000\002\007\011\000\002\014\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\006\000\002\014\007\000\002\010\015\000\002\011\011" +
    "\000\002\012\013\000\002\013\011\000\002\015\012\000" +
    "\002\015\011\000\002\006\005\000\002\006\004\000\002" +
    "\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\012\007\010\030\004\032\005\036\006\001" +
    "\002\000\004\031\246\001\002\000\022\005\032\006\023" +
    "\007\026\010\022\011\017\014\016\015\030\042\031\001" +
    "\002\000\004\030\237\001\002\000\004\002\236\001\002" +
    "\000\004\036\011\001\002\000\004\030\012\001\002\000" +
    "\004\031\013\001\002\000\004\032\014\001\002\000\022" +
    "\005\032\006\023\007\026\010\022\011\017\014\016\015" +
    "\030\042\031\001\002\000\026\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\033\ufff5\042" +
    "\ufff5\001\002\000\004\030\230\001\002\000\004\030\216" +
    "\001\002\000\026\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\033\ufff2\042\ufff2\001\002" +
    "\000\026\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\033\ufffb\042\ufffb\001\002\000\004" +
    "\042\177\001\002\000\006\026\162\042\163\001\002\000" +
    "\026\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\033\ufff7\042\ufff7\001\002\000\026\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\033\ufff9\042\ufff9\001\002\000\006\026\145\042" +
    "\146\001\002\000\026\005\032\006\023\007\026\010\022" +
    "\011\017\013\127\014\016\015\030\033\144\042\031\001" +
    "\002\000\004\030\057\001\002\000\004\040\046\001\002" +
    "\000\004\042\033\001\002\000\004\005\034\001\002\000" +
    "\004\040\035\001\002\000\010\005\037\027\040\043\036" +
    "\001\002\000\004\037\045\001\002\000\004\042\042\001" +
    "\002\000\004\037\041\001\002\000\026\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\033" +
    "\uffdf\042\uffdf\001\002\000\004\005\043\001\002\000\004" +
    "\037\044\001\002\000\026\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\013\uffde\014\uffde\015\uffde\033\uffde\042\uffde" +
    "\001\002\000\026\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\033\uffe0\042\uffe0\001\002" +
    "\000\010\005\050\027\051\043\047\001\002\000\004\037" +
    "\056\001\002\000\004\042\053\001\002\000\004\037\052" +
    "\001\002\000\026\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\033\uffe1\042\uffe1\001\002" +
    "\000\004\005\054\001\002\000\004\037\055\001\002\000" +
    "\026\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\033\uffe2\042\uffe2\001\002\000\026\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\033\uffe3\042\uffe3\001\002\000\006\006\061\042" +
    "\062\001\002\000\004\031\120\001\002\000\004\042\111" +
    "\001\002\000\004\016\063\001\002\000\004\043\064\001" +
    "\002\000\004\037\065\001\002\000\006\027\067\042\070" +
    "\001\002\000\004\037\101\001\002\000\006\031\uffdc\037" +
    "\uffdc\001\002\000\004\024\071\001\002\000\012\005\073" +
    "\027\074\042\075\043\072\001\002\000\006\031\uffda\037" +
    "\uffda\001\002\000\006\005\076\042\077\001\002\000\006" +
    "\031\uffdb\037\uffdb\001\002\000\006\031\uffd9\037\uffd9\001" +
    "\002\000\006\031\uffd8\037\uffd8\001\002\000\004\005\100" +
    "\001\002\000\006\031\uffd7\037\uffd7\001\002\000\006\026" +
    "\103\042\104\001\002\000\004\031\uffd1\001\002\000\004" +
    "\042\110\001\002\000\006\025\105\026\106\001\002\000" +
    "\004\043\107\001\002\000\004\031\uffcf\001\002\000\004" +
    "\031\uffd0\001\002\000\004\031\uffce\001\002\000\004\016" +
    "\112\001\002\000\004\043\113\001\002\000\004\037\114" +
    "\001\002\000\006\027\067\042\070\001\002\000\004\037" +
    "\116\001\002\000\006\026\103\042\104\001\002\000\004" +
    "\031\uffd2\001\002\000\004\032\121\001\002\000\022\005" +
    "\032\006\023\007\026\010\022\011\017\014\016\015\030" +
    "\042\031\001\002\000\026\005\032\006\023\007\026\010" +
    "\022\011\017\013\127\014\016\015\030\033\131\042\031" +
    "\001\002\000\026\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\033\ufff6\042\ufff6\001\002" +
    "\000\026\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\033\ufff3\042\ufff3\001\002\000\026" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\033\ufffc\042\ufffc\001\002\000\026\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\033\ufff8\042\ufff8\001\002\000\004\032\134\001\002" +
    "\000\026\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\033\ufffa\042\ufffa\001\002\000\026" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\033\uffd3\042\uffd3\001\002\000\004\013\127" +
    "\001\002\000\026\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\033\ufff4\042\ufff4\001\002" +
    "\000\022\005\032\006\023\007\026\010\022\011\017\014" +
    "\016\015\030\042\031\001\002\000\026\005\032\006\023" +
    "\007\026\010\022\011\017\013\127\014\016\015\030\033" +
    "\136\042\031\001\002\000\004\014\137\001\002\000\004" +
    "\030\140\001\002\000\006\027\067\042\070\001\002\000" +
    "\004\031\142\001\002\000\004\037\143\001\002\000\026" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\033\uffd4\042\uffd4\001\002\000\004\002\000" +
    "\001\002\000\004\042\160\001\002\000\012\016\152\025" +
    "\147\026\151\037\150\001\002\000\004\043\156\001\002" +
    "\000\026\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\033\ufff1\042\ufff1\001\002\000\004" +
    "\037\155\001\002\000\004\043\153\001\002\000\004\037" +
    "\154\001\002\000\026\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\013\uffef\014\uffef\015\uffef\033\uffef\042\uffef\001" +
    "\002\000\026\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\013\uffee\014\uffee\015\uffee\033\uffee\042\uffee\001\002\000" +
    "\004\037\157\001\002\000\026\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0\033\ufff0\042" +
    "\ufff0\001\002\000\004\037\161\001\002\000\026\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed\014\uffed\015" +
    "\uffed\033\uffed\042\uffed\001\002\000\004\042\175\001\002" +
    "\000\012\016\167\025\164\026\166\037\165\001\002\000" +
    "\004\043\173\001\002\000\026\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\013\uffec\014\uffec\015\uffec\033\uffec\042" +
    "\uffec\001\002\000\004\037\172\001\002\000\004\043\170" +
    "\001\002\000\004\037\171\001\002\000\026\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea\015\uffea" +
    "\033\uffea\042\uffea\001\002\000\026\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9\033\uffe9" +
    "\042\uffe9\001\002\000\004\037\174\001\002\000\026\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\033\uffeb\042\uffeb\001\002\000\004\037\176\001" +
    "\002\000\026\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\033\uffe8\042\uffe8\001\002\000" +
    "\006\016\201\025\200\001\002\000\004\005\210\001\002" +
    "\000\004\005\202\001\002\000\006\005\203\042\204\001" +
    "\002\000\004\037\207\001\002\000\004\005\205\001\002" +
    "\000\004\037\206\001\002\000\026\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\033\uffe4" +
    "\042\uffe4\001\002\000\026\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\033\uffe6\042\uffe6" +
    "\001\002\000\006\005\211\042\212\001\002\000\004\037" +
    "\215\001\002\000\004\005\213\001\002\000\004\037\214" +
    "\001\002\000\026\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\033\uffe5\042\uffe5\001\002" +
    "\000\026\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\033\uffe7\042\uffe7\001\002\000\006" +
    "\027\067\042\070\001\002\000\004\031\220\001\002\000" +
    "\004\032\221\001\002\000\022\005\032\006\023\007\026" +
    "\010\022\011\017\014\016\015\030\042\031\001\002\000" +
    "\026\005\032\006\023\007\026\010\022\011\017\013\127" +
    "\014\016\015\030\033\223\042\031\001\002\000\030\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\224\013\uffdd" +
    "\014\uffdd\015\uffdd\033\uffdd\042\uffdd\001\002\000\004\032" +
    "\225\001\002\000\022\005\032\006\023\007\026\010\022" +
    "\011\017\014\016\015\030\042\031\001\002\000\026\005" +
    "\032\006\023\007\026\010\022\011\017\013\127\014\016" +
    "\015\030\033\227\042\031\001\002\000\026\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\033\uffd6\042\uffd6\001\002\000\006\027\067\042\070\001" +
    "\002\000\004\031\232\001\002\000\004\032\233\001\002" +
    "\000\022\005\032\006\023\007\026\010\022\011\017\014" +
    "\016\015\030\042\031\001\002\000\026\005\032\006\023" +
    "\007\026\010\022\011\017\013\127\014\016\015\030\033" +
    "\235\042\031\001\002\000\026\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\033\uffd5\042" +
    "\uffd5\001\002\000\004\002\001\001\002\000\004\031\240" +
    "\001\002\000\004\032\241\001\002\000\022\005\032\006" +
    "\023\007\026\010\022\011\017\014\016\015\030\042\031" +
    "\001\002\000\026\005\032\006\023\007\026\010\022\011" +
    "\017\013\127\014\016\015\030\033\243\042\031\001\002" +
    "\000\004\002\uffff\001\002\000\026\005\032\006\023\007" +
    "\026\010\022\011\017\013\127\014\016\015\030\033\245" +
    "\042\031\001\002\000\004\002\ufffd\001\002\000\004\032" +
    "\247\001\002\000\022\005\032\006\023\007\026\010\022" +
    "\011\017\014\016\015\030\042\031\001\002\000\026\005" +
    "\032\006\023\007\026\010\022\011\017\013\127\014\016" +
    "\015\030\033\251\042\031\001\002\000\004\002\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\003\006\001\001\000\002\001\001\000" +
    "\016\004\243\005\020\007\024\010\023\011\014\013\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\026\005\020\007\024\010\023\011\014\013" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\124\007\127\010\125\011" +
    "\122\012\131\013\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\114\001\001\000\002\001\001\000\004\006" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\121\005\020\007\024\010\023\011\014\013\017\001" +
    "\001\000\016\005\124\007\127\010\125\011\122\012\131" +
    "\013\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\132\001\001\000" +
    "\002\001\001\000\016\004\134\005\020\007\024\010\023" +
    "\011\014\013\017\001\001\000\016\005\124\007\127\010" +
    "\125\011\122\012\131\013\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\221" +
    "\005\020\007\024\010\023\011\014\013\017\001\001\000" +
    "\016\005\124\007\127\010\125\011\122\012\131\013\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\225\005\020\007\024\010\023\011\014\013\017\001\001" +
    "\000\016\005\124\007\127\010\125\011\122\012\131\013" +
    "\123\001\001\000\002\001\001\000\004\014\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\233\005" +
    "\020\007\024\010\023\011\014\013\017\001\001\000\016" +
    "\005\124\007\127\010\125\011\122\012\131\013\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\241\005\020\007\024\010" +
    "\023\011\014\013\017\001\001\000\016\005\124\007\127" +
    "\010\125\011\122\012\131\013\123\001\001\000\002\001" +
    "\001\000\016\005\124\007\127\010\125\011\122\012\131" +
    "\013\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\247\005\020\007\024\010\023\011\014\013\017" +
    "\001\001\000\016\005\124\007\127\010\125\011\122\012" +
    "\131\013\123\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*DECLARACION_FOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*DECLARACION_FOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*DECLARACION_FOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*SENTENCIA_FOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*SENTENCIA_FOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*FOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*DO_WHILE*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*WHILE*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(6/*IF_ELSE*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*SENTENCIA_BOOLEANA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*SENTENCIA_BOOLEANA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*SENTENCIA_BOOLEANA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*SENTENCIA_BOOLEANA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*SENTENCIA_BOOLEANA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*SENTENCIA_BOOLEANA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*IF*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Comillas Identificador Comillas Dos_Puntos Comillas Identificador Comillas P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Comillas Identificador Comillas Dos_Puntos Op_booleano P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Comillas Identificador Comillas Dos_Puntos Numero P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Identificador Dos_Puntos Op_booleano P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Identificador Dos_Puntos Comillas Identificador Comillas P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Identificador Dos_Puntos Numero P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          default:
            {
              throw new Exception(
                 "Invalid action number found in internal parse table");
            }

        }
    }
}

